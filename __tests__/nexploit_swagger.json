{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "info": {
    "version": "1.0.0",
    "title": "NexPloit REST API",
    "description": "This is a NexPloit REST API. You can find out more about NexPloit at [NeuraLegion.com](https://www.NeuraLegion.com).",
    "termsOfService": "",
    "contact": {
      "email": "support@neuralegion.com"
    }
  },
  "host": "nexploit.app",
  "basePath": "/api/v1",
  "externalDocs": {
    "description": "Find out more about NexPloit",
    "url": "https://www.NeuraLegion.com"
  },
  "securityDefinitions": {
    "bearer": {
      "description": "For accessing the API a valid JWT token must be passed in all the queries in the `Authorization` header. A valid JWT token is generated by the API and returned as answer of a call to the route `/login` giving a valid user & password.",
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    },
    "api-key": {
      "description": "For accessing the API a valid Api-Key must be passed in all the queries in the `Authorization` header.",
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Agents"
    },
    {
      "name": "Archives"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Billing"
    },
    {
      "name": "Files"
    },
    {
      "name": "Issues"
    },
    {
      "name": "Payment methods"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Plans"
    },
    {
      "name": "Products"
    },
    {
      "name": "Scans"
    },
    {
      "name": "Subscriptions"
    }
  ],
  "paths": {
    "/agents": {
      "get": {
        "operationId": "AgentController.getAgents",
        "tags": [
          "Agents"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentDTO"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of all the agents available for the user.",
        "summary": "Request all the agents the user has access to."
      },
      "post": {
        "operationId": "AgentController.addAgent",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AgentDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/AgentDTO"
            }
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "409": {
            "description": "Agent with this title already exists."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Registers a new agent and returns its public id.",
        "summary": "Add a new agent."
      }
    },
    "/agents/available": {
      "get": {
        "operationId": "AgentController.getAvailableAgents",
        "tags": [
          "Agents"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentDTO"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of available agents for the user.",
        "summary": "Find available agents that the user has access to."
      }
    },
    "/agents/{agentId}": {
      "get": {
        "operationId": "AgentController.getAgent",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "type": "string",
            "required": true,
            "description": "Agent ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/AgentDTO"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Agent does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Find agent by ID."
      },
      "put": {
        "operationId": "AgentController.updateAgent",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "type": "string",
            "required": true,
            "description": "The agent ID."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Agent does not exist."
          },
          "409": {
            "description": "Agent is busy, access denied."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update the title or description of an existing agent."
      },
      "delete": {
        "operationId": "AgentController.removeAgent",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "type": "string",
            "required": true,
            "description": "The agent ID."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Agent does not exist."
          },
          "409": {
            "description": "Agent is busy, access denied."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove an existing agent."
      }
    },
    "/archives": {
      "post": {
        "operationId": "ArchiveController.uploadArchive",
        "tags": [
          "Archives"
        ],
        "parameters": [
          {
            "description": "The scan protocol.",
            "in": "query",
            "name": "protocol",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "discard",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The file.",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/json",
          "application/zip",
          "application/gzip"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/ArchiveView"
            }
          },
          "400": {
            "description": "The file with that name already exists or the HAR/WSAR file is corrupted."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "description": "Upload a HAR, WSAR, etc. Returns archive ID and available hosts if the uploaded file was a .HAR or .WSAR format.",
        "summary": "Upload a file"
      },
      "get": {
        "operationId": "ArchiveController.getArchives",
        "tags": [
          "Archives"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArchiveView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "description": "Returns an array of all the archives of the user.",
        "summary": "Get all the archives the logged-in user has access to."
      }
    },
    "/archives/{archiveId}": {
      "get": {
        "operationId": "ArchiveController.getArchive",
        "tags": [
          "Archives"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "archiveId",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "protocol",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/ArchiveView"
            }
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Archive doesn't exist."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "summary": "Get the archive by ID."
      }
    },
    "/login": {
      "post": {
        "operationId": "BaseController.login",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation. The authentication token is returned in a field named `token`. You must include this token in subsequent requests.",
            "headers": {
              "Authorization": {
                "type": "string",
                "description": "Bearer abcde12345"
              }
            },
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          },
          "400": {
            "description": "Invalid username or password."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "404": {
            "description": "User does not exist."
          }
        },
        "summary": "Logs in and returns the authentication token."
      }
    },
    "/logout": {
      "get": {
        "operationId": "BaseController.logout",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          }
        },
        "summary": "Logging out a user from the application."
      }
    },
    "/user": {
      "get": {
        "operationId": "BaseController.getMe",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "BaseController.updateMe",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MeDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/scans/{scanId}/issues": {
      "get": {
        "operationId": "IssueController.getScanIssues",
        "tags": [
          "Issues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IssueView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns all the issues that were discovered during a scan, by scan ID. Requires the logged-in user to have access to the scan.",
        "summary": "Get all the issues by scan ID."
      }
    },
    "/scans/{scanId}/issues/{issuesId}": {
      "get": {
        "operationId": "IssueController.getScanIssue",
        "tags": [
          "Issues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          },
          {
            "in": "path",
            "name": "issuesId",
            "type": "string",
            "required": true,
            "description": "The issue id."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/IssueView"
            }
          },
          "400": {
            "description": "Issue does not exist."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Find an issue by ID."
      },
      "put": {
        "operationId": "IssueController.editStatusIssue",
        "tags": [
          "Issues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          },
          {
            "in": "path",
            "name": "issuesId",
            "type": "string",
            "required": true,
            "description": "The issue id."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueControllerEditStatusIssuePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Issue does not exist."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Changes a specific issue status (solved/unsolved) in a specific scan.",
        "summary": "Change the status of an issue by ID."
      }
    },
    "/scans/{scanId}/issues/{issuesId}/execute": {
      "get": {
        "operationId": "IssueController.executeScriptIssue",
        "tags": [
          "Issues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          },
          {
            "in": "path",
            "name": "issuesId",
            "type": "string",
            "required": true,
            "description": "The issue id."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/IssueResponseView"
            }
          },
          "400": {
            "description": "Issue does not exist."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Executes a specific issue script to replay the vulnerability scenario.",
        "summary": "Execute an issue script by ID."
      }
    },
    "/scans/{scanId}/issues/{issuesId}/assignees": {
      "post": {
        "operationId": "IssueController.assignIssue",
        "tags": [
          "Issues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          },
          {
            "in": "path",
            "name": "issuesId",
            "type": "string",
            "required": true,
            "description": "The issue id."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssueControllerAssignIssuePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Issue does not exist. Or user does not exist."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Assigns a user in the organization to a specific issue.",
        "summary": "Assign user to an issue by ID."
      }
    },
    "/scans/{scanId}/issues/{issuesId}/assignees/{assigneeId}": {
      "delete": {
        "operationId": "IssueController.unassignIssue",
        "tags": [
          "Issues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          },
          {
            "in": "path",
            "name": "issuesId",
            "type": "string",
            "required": true,
            "description": "The issue id."
          },
          {
            "in": "path",
            "name": "assigneeId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Issue does not exist. Or user does not exist."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Unassigns a user in the organization from a specific issue.",
        "summary": "Unassigns a user from an issue by ID."
      }
    },
    "/scans": {
      "post": {
        "operationId": "ScanController.createScan",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScanConfigDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Failed to run scan."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "402": {
            "description": "You have reached the maximum allowed number of parallel scans. Please wait for current scans to finish or contact the system administrator to increase maximum allowed parallel scans."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "500": {
            "description": "Failed to run scan. Max memory reached."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "description": "Request to start a new scan for the received configuration.",
        "summary": "Run new scan."
      },
      "get": {
        "operationId": "ScanController.getScans",
        "tags": [
          "Scans"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScanView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "description": "Returns an array of all the scans the logged-in user has access to.",
        "summary": "Get all the scans the logged-in user has access to."
      }
    },
    "/scans/{scanId}": {
      "get": {
        "operationId": "ScanController.getScan",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/ScanView"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Scan does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "summary": "Find scan by id."
      },
      "patch": {
        "operationId": "ScanController.updateScan",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScanDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Scan does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "description": "Request to update a scan by scan ID.",
        "summary": "Update a scan by id."
      }
    },
    "/scans/{scanId}/run": {
      "get": {
        "operationId": "ScanController.runScanImmediately",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Failed to run scan."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "402": {
            "description": "You have reached the maximum allowed number of parallel scans. Please wait for current scans to finish or contact the system administrator to increase maximum allowed parallel scans."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "500": {
            "description": "Failed to run scan. Max memory reached."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "description": "Request to immediately start a scan by ID.",
        "summary": "Run the scan immediately."
      }
    },
    "/scans/{id}/stop": {
      "get": {
        "operationId": "ScanController.stopScan",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "The scan id."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Cannot stop unrecognized scan."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Scan does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "summary": "Stop scan by id."
      }
    },
    "/scans/{id}": {
      "delete": {
        "operationId": "ScanController.deleteScan",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true,
            "description": "The scan id."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Cannot delete unrecognized scan."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Scan does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "summary": "Delete scan by id."
      }
    },
    "/scans/{scanId}/retest": {
      "post": {
        "operationId": "ScanController.retestScan",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "type": "string",
            "required": true,
            "description": "The scan id."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScanDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Failed to run scan."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "402": {
            "description": "You have reached the maximum allowed parallel scans."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Scan does not exist."
          },
          "409": {
            "description": "Starting an additional scan will consume another session credit."
          },
          "449": {
            "description": "No more sessions available, please purchase more sessions to perform additional scans."
          },
          "500": {
            "description": "Failed to run scan. Max memory reached."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Request to start a new scan using the same configuration as an existing scan, by scan ID.",
        "summary": "Retest a scan by id."
      }
    },
    "/scans/stop": {
      "post": {
        "operationId": "ScanController.stopScans",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScanControllerStopScansPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Cannot stop unrecognized scan."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Scan does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "api-key": []
          }
        ],
        "summary": "Stop scans by ids."
      }
    },
    "/scans/delete": {
      "post": {
        "operationId": "ScanController.deleteScans",
        "tags": [
          "Scans"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScanControllerDeleteScansPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Cannot delete unrecognized scan."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Scan does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete scans by ids."
      }
    },
    "/payments": {
      "get": {
        "operationId": "PaymentsController.getAllPayments",
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of all the payments.",
        "summary": "Get all payments."
      }
    },
    "/payments/{paymentId}/repay": {
      "put": {
        "operationId": "PaymentsController.tryToRepay",
        "tags": [
          "Payments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/PlanView"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Try to repay failed payment."
      }
    },
    "/payments/{paymentId}": {
      "patch": {
        "operationId": "PaymentsController.updatePaymentMethod",
        "tags": [
          "Payments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentsControllerUpdatePaymentMethodPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Update payment method on failed payment.",
        "summary": "Update the reference on payment method."
      }
    },
    "/billing": {
      "get": {
        "operationId": "BillingController.getBillingSummary",
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/BillingSummary"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Returns billing summary."
      }
    },
    "/payment-methods": {
      "get": {
        "operationId": "PaymentMethodsController.getPaymentMethods",
        "tags": [
          "Payment methods"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of all the payment methods of the organization.",
        "summary": "Get all the payment methods your's organization."
      },
      "post": {
        "operationId": "PaymentMethodsController.addPaymentMethod",
        "tags": [
          "Payment methods"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethodDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/PaymentMethodView"
            }
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add a new payment method."
      }
    },
    "/payment-methods/{methodId}": {
      "get": {
        "operationId": "PaymentMethodsController.getPaymentMethod",
        "tags": [
          "Payment methods"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "methodId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/PaymentMethodView"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns the payment method by ID.",
        "summary": "Get the payment method by ID."
      },
      "patch": {
        "operationId": "PaymentMethodsController.makeDefaultPaymentMethod",
        "tags": [
          "Payment methods"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "methodId",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethodsControllerMakeDefaultPaymentMethodPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update the default payment method by ID for your organization."
      },
      "delete": {
        "operationId": "PaymentMethodsController.removePaymentMethod",
        "tags": [
          "Payment methods"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "methodId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove the payment method by ID."
      }
    },
    "/subscriptions": {
      "get": {
        "operationId": "SubscriptionsController.getSubscriptions",
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of all the subscriptions of the organization.",
        "summary": "Get all the subscriptions your's organization."
      },
      "post": {
        "operationId": "SubscriptionsController.subscribe",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Subscribe to the plan."
      }
    },
    "/subscriptions/{subscriptionId}": {
      "get": {
        "operationId": "SubscriptionsController.getSubscription",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/SubscriptionView"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Subscription does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Find subscription by id."
      },
      "patch": {
        "operationId": "SubscriptionsController.updateSubscription",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Subscription does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update subscription by id."
      },
      "delete": {
        "operationId": "SubscriptionsController.cancelSubscription",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Subscription doesn't exist."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel an subscription."
      }
    },
    "/products": {
      "get": {
        "operationId": "ProductsController.getAllOffers",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/ProductsView"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns a map of all the products.",
        "summary": "Get all the NexPloit's products."
      }
    },
    "/products/categories": {
      "get": {
        "operationId": "ProductsController.getAllCategories",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of all the categories.",
        "summary": "Get the categories list."
      }
    },
    "/products/features": {
      "get": {
        "operationId": "ProductsController.getAllFeatures",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FeatureView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of all the features.",
        "summary": "Get the features list."
      }
    },
    "/plans": {
      "get": {
        "operationId": "PlansController.getAllPlans",
        "tags": [
          "Plans"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/PlanView"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of all the plans.",
        "summary": "Get all the NexPloit's plans."
      }
    },
    "/files": {
      "get": {
        "operationId": "StorageController.getAllFiles",
        "tags": [
          "Files"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageFileView"
              }
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns an array of all the files the logged-in user has access to.",
        "summary": "Get all the files the logged-in user has access to."
      },
      "post": {
        "operationId": "StorageController.storeFile",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/json",
          "application/zip",
          "application/gzip"
        ],
        "responses": {
          "201": {
            "description": "Successful operation."
          },
          "400": {
            "description": "<File too long | Too many parts | Too many files | Field name too long | Field value too long | Too many fields | Unexpected field>  [fieldName]\n                            Example: File too long file1"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload a file in the storage."
      },
      "delete": {
        "operationId": "StorageController.removeFiles",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StorageControllerRemoveFilesPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove the files by IDs."
      }
    },
    "/files/usage": {
      "get": {
        "operationId": "StorageController.getUsageStatistic",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "since",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "until",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageUsageReadModel"
              }
            }
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get the storage usage statistic."
      }
    },
    "/files/metrics": {
      "get": {
        "operationId": "StorageController.getStorageMetrics",
        "tags": [
          "Files"
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/StorageView"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all the storage metrics."
      }
    },
    "/files/{fileId}": {
      "get": {
        "operationId": "StorageController.downloadFile",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json",
          "application/zip",
          "application/gzip"
        ],
        "summary": "Download a file by ID."
      },
      "delete": {
        "operationId": "StorageController.removeFile",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove the file by ID."
      }
    },
    "/customers/{customerId}/billing": {
      "get": {
        "operationId": "AdminBillingController.getBillingSummary",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/BillingSummary"
            }
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Returns billing summary."
      }
    },
    "/customers/{customerId}/subscriptions/{subscriptionId}": {
      "patch": {
        "operationId": "AdminSubscriptionsController.updateSubscription",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Subscription does not exist."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update subscription by id."
      },
      "delete": {
        "operationId": "AdminSubscriptionsController.cancelSubscription",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          },
          "404": {
            "description": "Subscription doesn't exist."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel an subscription."
      }
    },
    "/customers/{customerId}/subscriptions": {
      "post": {
        "operationId": "AdminSubscriptionsController.subscribe",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Missing required parameter"
          },
          "401": {
            "description": "Failed to log in with provided credentials."
          },
          "403": {
            "description": "The account doesn't have any permissions for a resource"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Subscribe to the plan."
      }
    }
  },
  "definitions": {
    "AgentDTO": {
      "properties": {
        "active": {
          "description": "The flag indicates that the agent was blocked by the user.",
          "title": "Active",
          "type": "boolean",
          "nullable": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "nullable": true
        },
        "title": {
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "type": "object"
    },
    "HostView": {
      "properties": {
        "hostname": {
          "type": "string"
        },
        "authorized": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ArchiveView": {
      "properties": {
        "id": {
          "format": "uuid",
          "title": "Archive ID",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "fileName": {
          "description": "The name used to uniquely identify a file stored in a cloud.",
          "title": "File name",
          "type": "string"
        },
        "hosts": {
          "default": [],
          "items": {
            "$ref": "#/definitions/HostView"
          },
          "title": "Hosts",
          "type": "array"
        },
        "uploadedAt": {
          "description": "The date on which the archive was uploaded.",
          "title": "Uploading date",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProfileView": {
      "properties": {
        "type": {
          "enum": [
            "github",
            "google",
            "bitbucket",
            "facebook",
            "trello"
          ],
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        }
      },
      "required": [
        "type",
        "id",
        "nodeId"
      ],
      "type": "object"
    },
    "UserView": {
      "properties": {
        "id": {
          "title": "User ID",
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "title": "Resource user ID",
          "maxLength": 22,
          "type": "string"
        },
        "firstName": {
          "maxLength": 80,
          "minLength": 3,
          "type": "string"
        },
        "lastName": {
          "maxLength": 80,
          "minLength": 3,
          "type": "string"
        },
        "email": {
          "title": "Email",
          "maxLength": 60,
          "format": "email",
          "type": "string"
        },
        "status": {
          "enum": [
            "password_protected",
            "email_confirmed",
            "account_created"
          ],
          "type": "string"
        },
        "active": {
          "description": "The flag indicates that the user was blocked by an admin.",
          "title": "Active",
          "type": "boolean"
        },
        "roles": {
          "enum": [
            "User",
            "Partner",
            "Super User",
            "Admin"
          ],
          "type": "string",
          "description": "The user role defines the permissions of users to perform groups of tasks.",
          "title": "User role",
          "default": "user"
        },
        "token": {
          "type": "string",
          "nullable": true
        },
        "profiles": {
          "default": [],
          "items": {
            "$ref": "#/definitions/ProfileView"
          },
          "type": "array"
        },
        "mfaEnabled": {
          "default": false,
          "type": "boolean"
        },
        "mfaLock": {
          "default": false,
          "type": "boolean"
        }
      },
      "required": [
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "LoginDto": {
      "properties": {
        "email": {
          "description": "The user name for login.",
          "title": "Email",
          "format": "email",
          "type": "string"
        },
        "password": {
          "description": "The password for login in clear text.",
          "title": "Password",
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ],
      "type": "object"
    },
    "MeDto": {
      "properties": {
        "email": {
          "format": "email",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IssueRequestView": {
      "properties": {
        "method": {
          "description": "The outgoing HTTP request method.",
          "title": "Method",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "HEAD",
            "PATCH",
            "OPTIONS"
          ],
          "type": "string"
        },
        "url": {
          "format": "url",
          "title": "URL",
          "type": "string"
        },
        "headers": {
          "description": "Outgoing headers for this request.",
          "title": "Headers",
          "type": "object"
        },
        "body": {
          "description": "The request body, or null if one isn't set. It can include a reference to any user-defined data type.",
          "title": "Body",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IssueResponseView": {
      "properties": {
        "headers": {
          "description": "All response headers.",
          "title": "Headers",
          "type": "object"
        },
        "body": {
          "description": "The response body, or null if one was not returned.",
          "title": "Body",
          "type": "string"
        },
        "status": {
          "description": "Response status code.",
          "title": "Status",
          "type": "number"
        }
      },
      "type": "object"
    },
    "EngineIssueCommentDto": {
      "properties": {
        "headline": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "links": {
          "items": {
            "type": [
              "string"
            ]
          },
          "format": "url",
          "default": [],
          "type": "array"
        }
      },
      "required": [
        "headline",
        "text"
      ],
      "type": "object"
    },
    "IssueView": {
      "properties": {
        "id": {
          "title": "Issue ID",
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "scanId": {
          "title": "Scan ID",
          "format": "uuid",
          "type": "string"
        },
        "order": {
          "default": 0,
          "type": "number"
        },
        "solved": {
          "default": false,
          "description": "The flag indicates that the issue was solved.",
          "title": "Status",
          "type": "boolean"
        },
        "details": {
          "description": "Detailed information about the issue.",
          "title": "Details",
          "type": "string"
        },
        "name": {
          "description": "Common type of the vulnerability.",
          "title": "Name",
          "type": "string"
        },
        "severity": {
          "description": "The severity level is based on the the industry standard for each specific vulnerability (i.e OWASP).",
          "title": "Severity Level",
          "enum": [
            "Low",
            "Medium",
            "High"
          ],
          "type": "string"
        },
        "protocol": {
          "description": "Exploited protocol: HTTP, Websocket, etc.",
          "title": "Protocol",
          "enum": [
            "http",
            "websocket"
          ],
          "type": "string"
        },
        "remedy": {
          "description": "Suggestions of how to successfuly remediate this type of vulnerability.",
          "title": "Remedy",
          "type": "string"
        },
        "exposure": {
          "description": "Describes different consequences associated with the vulnerability.",
          "title": "Possible exposure",
          "type": "string"
        },
        "time": {
          "description": "The time of detection.",
          "title": "Time",
          "type": "string"
        },
        "screenshot": {
          "description": "The base64 encoded screenshot that visualizes the issue, if it is available (i.e an XSS).",
          "title": "Screenshot",
          "type": "string"
        },
        "originalRequest": {
          "$ref": "#/definitions/IssueRequestView",
          "title": "The original request"
        },
        "request": {
          "$ref": "#/definitions/IssueRequestView",
          "title": "Request"
        },
        "response": {
          "$ref": "#/definitions/IssueResponseView",
          "title": "Response"
        },
        "assignees": {
          "items": {
            "type": [
              "string"
            ]
          },
          "format": "uuid",
          "default": [],
          "description": "The list of assigned users to the issue.",
          "title": "Assignees IDs",
          "type": "array"
        },
        "resources": {
          "items": {
            "type": [
              "string"
            ]
          },
          "format": "url",
          "default": [],
          "description": "The list of link to external resources.",
          "title": "Resources",
          "type": "array"
        },
        "comments": {
          "default": [],
          "title": "Comments",
          "items": {
            "$ref": "#/definitions/EngineIssueCommentDto"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IssueControllerEditStatusIssuePayload": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      },
      "required": [
        "status"
      ]
    },
    "IssueControllerAssignIssuePayload": {
      "type": "object",
      "properties": {
        "assigneeId": {
          "type": "string"
        }
      },
      "required": [
        "assigneeId"
      ]
    },
    "ScanScheduleDto": {
      "properties": {
        "type": {
          "description": "Describes the behavior of a scan. Single scan will run once at the given time.",
          "title": "Job type",
          "enum": [
            "single",
            "normal"
          ],
          "type": "string"
        },
        "repeatInterval": {
          "description": "For recurrent scans, the interval on which the scan should repeat.",
          "title": "Interval",
          "type": "number",
          "nullable": true
        },
        "repeatIntervalUnit": {
          "description": "Units of the interval on which the scan should repeat.",
          "title": "Units of the interval",
          "enum": [
            "minutes",
            "hours",
            "days",
            "none"
          ],
          "type": "string"
        },
        "nextRunAt": {
          "format": "date-time",
          "description": "Date of the next scheduled scan start.",
          "title": "Launch date",
          "type": "string",
          "nullable": true
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "TrackingSpaceDto": {
      "properties": {
        "service": {
          "enum": [
            "jenkins",
            "circleci",
            "travisci",
            "bamboo",
            "github",
            "jira",
            "trello"
          ],
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "avatar": {
          "format": "url",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BuildDto": {
      "properties": {
        "service": {
          "description": "The CI tool name your project uses.",
          "title": "Service name",
          "enum": [
            "jenkins",
            "circleci",
            "travisci",
            "bamboo",
            "github",
            "jira",
            "trello"
          ],
          "type": "string"
        },
        "buildNumber": {
          "description": "The current build number.",
          "title": "Build number",
          "type": "number"
        },
        "project": {
          "description": "Name of the project of this build. This is the name you gave your job or workflow when you first setup CI.",
          "title": "Project name",
          "type": "string",
          "nullable": true
        },
        "vcs": {
          "description": "The version control system type your project uses. Current choices are github or bitbucket. CircleCI only.",
          "enum": [
            "github",
            "bitbucket"
          ],
          "title": "VCS type",
          "type": "string",
          "nullable": true
        }
      },
      "required": [
        "service",
        "buildNumber"
      ],
      "type": "object"
    },
    "ScanConfigDTO": {
      "properties": {
        "name": {
          "description": "Short name of the scan.",
          "title": "Name",
          "type": "string"
        },
        "schedule": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/ScanScheduleDto"
            }
          ],
          "description": "In order to use scheduling, the frequency must be set. Frequency can be once for a single scan or daily, weekly, biweekly or monthly for recurring scans. Alternatively, a start date for the schedule can be specified.",
          "title": "Schedule settings",
          "$ref": "#/definitions/ScanScheduleDto"
        },
        "discoveryTypes": {
          "items": {
            "enum": [
              "archive",
              "crawler"
            ],
            "type": "string"
          },
          "description": "Archive-type scan or Crawler-type scan.",
          "title": "Discovery Types",
          "type": "array"
        },
        "protocol": {
          "enum": [
            "http",
            "websocket"
          ],
          "description": "Exploited protocol: HTTP, Websocket, etc.",
          "title": "Protocol",
          "type": "string"
        },
        "poolSize": {
          "title": "Pool size",
          "default": 100,
          "type": "number"
        },
        "type": {
          "enum": [
            "appscan",
            "protoscan"
          ],
          "description": "Protocol-type scan or Application-type scan.",
          "title": "Type",
          "type": "string"
        },
        "module": {
          "description": "The core module tests for specific scenarios, mainly OWASP top 10 and other common scenarios. The exploratory module generates various scenarios to test for unknown vulnerabilities, providing automated AI led fuzzing testing. This module can be coupled with the agent to find additional vulnerabilities.",
          "default": "core",
          "title": "Module",
          "enum": [
            "core",
            "exploratory"
          ],
          "type": "string"
        },
        "trackingSpace": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/TrackingSpaceDto"
            }
          ],
          "title": "Tracking space",
          "$ref": "#/definitions/TrackingSpaceDto"
        },
        "crawlerUrls": {
          "items": {
            "type": [
              "string"
            ]
          },
          "format": "uri",
          "title": "Crawler",
          "type": "array"
        },
        "build": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/BuildDto"
            }
          ],
          "title": "Build",
          "$ref": "#/definitions/BuildDto"
        },
        "extraHosts": {
          "description": "Custom hosts.",
          "default": {},
          "title": "Hosts",
          "type": "object",
          "nullable": true
        },
        "headers": {
          "description": "Outgoing headers to be used.",
          "default": {},
          "title": "Headers",
          "type": "object",
          "nullable": true
        },
        "archiveId": {
          "format": "uuid",
          "title": "Archive ID",
          "type": "string",
          "nullable": true
        },
        "hostsFilter": {
          "items": {
            "type": [
              "string"
            ]
          },
          "format": "hostname",
          "description": "Any host in the HAR file not found in this list will be ignored and not added to the scan. If this array is empty all hosts are scanned.",
          "title": "List of host names",
          "type": "array"
        },
        "agentUuid": {
          "format": "uuid",
          "description": "ID of any agents connected with the scan.",
          "title": "Agent ID",
          "type": "string",
          "nullable": true
        }
      },
      "required": [
        "name",
        "discoveryTypes",
        "protocol",
        "type"
      ],
      "type": "object"
    },
    "ScanOwnerMemberView": {
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "firstName": {
          "maxLength": 80,
          "minLength": 3,
          "type": "string"
        },
        "lastName": {
          "maxLength": 80,
          "minLength": 3,
          "type": "string"
        }
      },
      "required": [
        "id",
        "nodeId",
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "ScanOwnerOrganizationView": {
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "name": {
          "maxLength": 200,
          "type": "string"
        }
      },
      "required": [
        "id",
        "nodeId",
        "name"
      ],
      "type": "object"
    },
    "CheckView": {
      "properties": {
        "name": {
          "type": "string"
        },
        "severity": {
          "enum": [
            "Low",
            "Medium",
            "High"
          ],
          "type": "string"
        },
        "passed": {
          "default": false,
          "type": "boolean"
        },
        "progress": {
          "default": 0,
          "type": "number"
        },
        "type": {
          "enum": [
            "core",
            "exploratory"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScanView": {
      "properties": {
        "id": {
          "format": "uuid",
          "title": "Scan ID",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "name": {
          "description": "The scan name.",
          "title": "Name",
          "type": "string"
        },
        "module": {
          "default": "core",
          "title": "Module",
          "enum": [
            "core",
            "exploratory"
          ],
          "type": "string"
        },
        "protocol": {
          "description": "Exploited protocol: HTTP, Websocket, etc.",
          "title": "Protocol",
          "enum": [
            "http",
            "websocket"
          ],
          "type": "string"
        },
        "entryPoints": {
          "minimum": 0,
          "default": 0,
          "description": "The number of entry points discovered during the scan.",
          "title": "Entry points",
          "type": "number"
        },
        "totalParams": {
          "minimum": 0,
          "default": 0,
          "description": "The number of params those was mutated during the scan.",
          "title": "Total params",
          "type": "number"
        },
        "owner": {
          "$ref": "#/definitions/ScanOwnerMemberView",
          "description": "Scan owner information, such as name and id of the user that initiated the scan.",
          "title": "Owner"
        },
        "organization": {
          "$ref": "#/definitions/ScanOwnerOrganizationView",
          "description": "Scan organization information, such as name and id of the organization that initiated the scan.",
          "title": "Owner organization"
        },
        "status": {
          "description": "Contains basic status information, such as scan phase and general status (running/stopped/etc). If Stop status was returned, it means the scan either finished or didn't run due to an error or scheduling.",
          "title": "Status",
          "enum": [
            "idle",
            "failed",
            "running",
            "stopped",
            "queued",
            "scheduled",
            "pending"
          ],
          "type": "string"
        },
        "elapsed": {
          "description": "Total scan duration.",
          "title": "Elapsed time",
          "type": "number"
        },
        "type": {
          "description": "Protocol-type scan or Application-type scan.",
          "title": "Type",
          "enum": [
            "appscan",
            "protoscan"
          ],
          "type": "string"
        },
        "discoveryTypes": {
          "items": {
            "enum": [
              "archive",
              "crawler"
            ],
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Archive-type scan or Crawler-type scan.",
          "title": "Discovery Types",
          "type": "array"
        },
        "issuesLength": {
          "default": 0,
          "minimum": 0,
          "description": "The number of discovered issues during a scan.",
          "title": "Issues",
          "type": "number"
        },
        "targets": {
          "items": {
            "type": [
              "string"
            ]
          },
          "default": [],
          "format": "hostname",
          "description": "The list of scanned hosts.",
          "title": "Scanned hosts",
          "type": "array"
        },
        "requests": {
          "default": 0,
          "minimum": 0,
          "description": "The number of total requests sent.",
          "title": "Requests",
          "type": "number"
        },
        "parentId": {
          "format": "uuid",
          "type": "string"
        },
        "tests": {
          "type": "object"
        },
        "checks": {
          "items": {
            "$ref": "#/definitions/CheckView"
          },
          "type": "array"
        },
        "issuesBySeverity": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "schedule": {
          "title": "Schedule settings",
          "type": "object"
        },
        "startTime": {
          "description": "The date on which the new scan was started.",
          "title": "Start date",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "nodeId",
        "name",
        "protocol",
        "discoveryTypes"
      ],
      "type": "object"
    },
    "ScanDTO": {
      "properties": {
        "name": {
          "description": "Short name of the scan.",
          "title": "Name",
          "type": "string",
          "nullable": true
        },
        "schedule": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/ScanScheduleDto"
            }
          ],
          "description": "In order to use scheduling, the frequency must be set. Frequency can be once for a single scan or daily, weekly, biweekly or monthly for recurring scans. Alternatively, a start date for the schedule can be specified.",
          "title": "Schedule settings",
          "$ref": "#/definitions/ScanScheduleDto"
        }
      },
      "type": "object"
    },
    "ScanControllerStopScansPayload": {
      "type": "object",
      "properties": {
        "scanIds": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "scanIds"
      ]
    },
    "ScanControllerDeleteScansPayload": {
      "type": "object",
      "properties": {
        "scanIds": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "scanIds"
      ]
    },
    "PaymentMethodSummaryView": {
      "properties": {
        "paymentMethodId": {
          "maxLength": 22,
          "type": "string"
        },
        "cardType": {
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Diners Club",
            "Discover",
            "UnionPay",
            "JCB"
          ],
          "type": "string"
        },
        "last4": {
          "maxLength": 4,
          "type": "string"
        },
        "expiration": {
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "cardType",
        "last4",
        "expiration"
      ],
      "type": "object"
    },
    "PaymentView": {
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "amount": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        },
        "paymentMethodSummary": {
          "$ref": "#/definitions/PaymentMethodSummaryView"
        },
        "paymentMethodId": {
          "type": "string"
        },
        "date": {
          "format": "data-time",
          "type": "string"
        },
        "paid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PlanView": {
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "validUntil": {
          "format": "date-time",
          "type": "string"
        },
        "interval": {
          "default": "none",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "none"
          ],
          "type": "string"
        },
        "productId": {
          "maxLength": 22,
          "type": "string"
        },
        "price": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        },
        "discount": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "PaymentsControllerUpdatePaymentMethodPayload": {
      "type": "object",
      "properties": {
        "paymentMethodId": {
          "type": "string"
        }
      },
      "required": [
        "paymentMethodId"
      ]
    },
    "SubscriptionView": {
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "paymentMethodId": {
          "maxLength": 22,
          "type": "string"
        },
        "startedAt": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "default": "INCOMPLETE",
          "enum": [
            "INCOMPLETE",
            "ACTIVE",
            "PAST_DUE",
            "CANCELED"
          ],
          "type": "string"
        },
        "quantity": {
          "default": 1,
          "minimum": 1,
          "type": "number"
        },
        "plan": {
          "$ref": "#/definitions/PlanView"
        }
      },
      "type": "object"
    },
    "BillingSummary": {
      "properties": {
        "service": {
          "$ref": "#/definitions/SubscriptionView"
        },
        "engine": {
          "$ref": "#/definitions/SubscriptionView"
        },
        "fileStorage": {
          "$ref": "#/definitions/SubscriptionView"
        },
        "currentPaymentMethodId": {
          "maxLength": 22,
          "type": "string"
        },
        "paymentMethodSummaries": {
          "default": [],
          "items": {
            "$ref": "#/definitions/PaymentMethodSummaryView"
          },
          "uniqueItems": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "AddressDto": {
      "properties": {
        "city": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "nullable": true
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string",
          "nullable": true
        }
      },
      "required": [
        "city",
        "zip",
        "country",
        "line1"
      ],
      "type": "object"
    },
    "PaymentMethodView": {
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "cardType": {
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Diners Club",
            "Discover",
            "UnionPay",
            "JCB"
          ],
          "type": "string"
        },
        "last4": {
          "maxLength": 4,
          "type": "string"
        },
        "cardHolderName": {
          "maxLength": 200,
          "type": "string"
        },
        "expiration": {
          "format": "date",
          "type": "string"
        },
        "defaultMethod": {
          "type": "boolean"
        },
        "billingAddress": {
          "$ref": "#/definitions/AddressDto"
        }
      },
      "required": [
        "cardType",
        "last4",
        "cardHolderName",
        "expiration"
      ],
      "type": "object"
    },
    "PaymentMethodDto": {
      "properties": {
        "cardNumber": {
          "type": "string"
        },
        "securityNumber": {
          "type": "string"
        },
        "cardHolderName": {
          "maxLength": 200,
          "type": "string"
        },
        "expiration": {
          "type": "string"
        },
        "defaultMethod": {
          "default": true,
          "type": "boolean"
        },
        "billingAddress": {
          "$ref": "#/definitions/AddressDto"
        }
      },
      "required": [
        "cardNumber",
        "securityNumber",
        "cardHolderName",
        "expiration",
        "billingAddress"
      ],
      "type": "object"
    },
    "PaymentMethodsControllerMakeDefaultPaymentMethodPayload": {
      "type": "object",
      "properties": {
        "defaultMethod": {
          "type": "boolean"
        }
      },
      "required": [
        "defaultMethod"
      ]
    },
    "SubscriptionDto": {
      "properties": {
        "paymentMethodId": {
          "type": "string",
          "nullable": true
        },
        "quantity": {
          "default": 1,
          "type": "number"
        },
        "planId": {
          "type": "string"
        }
      },
      "required": [
        "planId"
      ],
      "type": "object"
    },
    "FeatureView": {
      "properties": {
        "id": {
          "type": "number"
        },
        "order": {
          "minimum": 1,
          "type": "number"
        },
        "name": {
          "maxLength": 200,
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "ProductView": {
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "order": {
          "minimum": 1,
          "type": "number"
        },
        "categoryId": {
          "type": "number"
        },
        "name": {
          "maxLength": 200,
          "type": "string"
        },
        "description": {
          "maxLength": 1000,
          "type": "string"
        },
        "features": {
          "default": [],
          "items": {
            "$ref": "#/definitions/FeatureView"
          },
          "type": "array"
        },
        "plans": {
          "default": [],
          "items": {
            "$ref": "#/definitions/PlanView"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProductsView": {
      "properties": {
        "services": {
          "items": {
            "$ref": "#/definitions/ProductView"
          },
          "type": "array"
        },
        "engine": {
          "$ref": "#/definitions/ProductView"
        },
        "fileStorage": {
          "$ref": "#/definitions/ProductView"
        }
      },
      "type": "object"
    },
    "CategoryView": {
      "properties": {
        "id": {
          "type": "number"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "type": "object"
    },
    "StorageFileView": {
      "properties": {
        "id": {
          "title": "The file ID",
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "title": "The public file ID",
          "maxLength": 22,
          "type": "string"
        },
        "size": {
          "description": "The size of the file in bytes",
          "default": 0,
          "minimum": 0,
          "type": "number"
        },
        "mimeType": {
          "description": "The mime type of the file.",
          "type": "string"
        },
        "name": {
          "description": "The name used to uniquely identify a file stored in a cloud.",
          "title": "File name",
          "maxLength": 260,
          "type": "string"
        },
        "lastModified": {
          "format": "date-time",
          "description": "The date on which the file was updated.",
          "title": "Modification date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ObjectID": {
      "type": "object",
      "properties": {}
    },
    "StorageUsageReadModel": {
      "properties": {
        "id": {
          "$ref": "#/definitions/ObjectID"
        },
        "filesCount": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        },
        "bytesStored": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StorageView": {
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "nodeId": {
          "maxLength": 22,
          "type": "string"
        },
        "used": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        },
        "capacity": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        },
        "filesCount": {
          "default": 0,
          "minimum": 0,
          "type": "number"
        }
      },
      "type": "object"
    },
    "StorageControllerRemoveFilesPayload": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "ids"
      ]
    }
  }
}
